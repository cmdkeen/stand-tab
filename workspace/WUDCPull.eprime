language ESSENCE' 1.b.a

$given weight, tpr, size, rounds : int

given weight, tpr, ppsize, cppsize, desiredsize, rounds : int

given pp : matrix indexed by [int(1..ppsize),int(1..tpr)] of int(0..(rounds-1))
given cpp:  matrix indexed by [int(1..cppsize),int(1..tpr)] of int(0..(rounds-1))

find allocations : matrix indexed by [int(1..ppsize),int(1..tpr)] of bool
find pullups: matrix indexed by [int(1..cppsize),int(1..tpr)] of bool

minimising (sum team : int(1..ppsize) . sum pos : int(1..tpr) . 
	allocations[team, pos] * pp[team,pos]* weight
	)
	+
	(sum team : int(1..cppsize) . sum pos : int(1..tpr) . 
	pullups[team, pos] * cpp[team,pos]* weight
	)

such that

$each row only contains a single 1 - ie. only assigned for one team
forall team : int(1..ppsize) .
	(sum allocs : int(1..tpr) . allocations[team, allocs]) = 1,

$the total sum of pullups = the number of pullups needed
(sum team : int(1..cppsize) . sum pos : int(1..tpr) . 
	pullups[team, pos]) = (desiredsize-ppsize),

$each column adds up to the number of rooms required
forall col : int(1..tpr) . 
	(sum team : int(1..ppsize) . allocations[team,col]) 
+ (sum team : int(1..cppsize) . pullups[team,col]) 
= (desiredsize/tpr)