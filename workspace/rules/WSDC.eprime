language ESSENCE' 1.b.a

given setsize, numTeams, rounds : int

letting SETSIZE be domain int(1..setsize)
letting TEAMS be domain int(0..numTeams-1)
letting SIDE be domain int(1..2)
letting ROUNDS be domain int(0..rounds-1)

$the group this team belongs to
given set : matrix indexed by [TEAMS] of SETSIZE

$the allocation
find a : matrix indexed by [ROUNDS, TEAMS] of TEAMS,
$the side this team will be on
s : matrix indexed by [ROUNDS, TEAMS] of SIDE,
$the group of the team this team is facting in each round
se: matrix indexed by [ROUNDS, TEAMS] of SETSIZE,
$the number of times the team is facing a team from each group
f : matrix indexed by [TEAMS, SETSIZE] of int(1..3)

such that

$different opponents
forall r : ROUNDS . alldifferent(a[r,..]),
$everyone competiting in each round
forall t : TEAMS . alldifferent(a[..,t]),
$don't face themselves
forall t : TEAMS . forall r : ROUNDS .  a[r,t] != t,

$reflexive - if against a team then that team is against this team
forall t : TEAMS . forall r : ROUNDS . (t = a[r,a[r,t]]),

$1P and 1O team in each pairing
forall r : ROUNDS . forall t : TEAMS . (s[r,t] + s[r,a[r,t]] = 3),

$stores the group of the facing team for each round
forall t: TEAMS . forall r : ROUNDS . set[t] = se[r,a[r,t]],

$sets f as the frequency of each group for this team - constraint by the range of f to 1..3
forall t : TEAMS . forall s : SETSIZE .
	(sum r : ROUNDS . se[r,t] = s) = f[t,s],

$adjacency criteria for groups - in addition to  1<=f[t,s]<=3
forall t : TEAMS . forall s : int(1..setsize-1) .
	(f[t,s] + f[t,s+1]) <=5

